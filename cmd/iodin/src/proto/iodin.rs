// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc 3.21.9
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `iodin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:iodin.Request)
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:iodin.Request.version)
    pub version: u32,
    // @@protoc_insertion_point(field:iodin.Request.command)
    pub command: ::protobuf::EnumOrUnknown<request::Command>,
    // @@protoc_insertion_point(field:iodin.Request.timeout)
    pub timeout: u32,
    // @@protoc_insertion_point(field:iodin.Request.arg_uint)
    pub arg_uint: u32,
    // @@protoc_insertion_point(field:iodin.Request.arg_bytes)
    pub arg_bytes: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:iodin.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Request| { &m.version },
            |m: &mut Request| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command",
            |m: &Request| { &m.command },
            |m: &mut Request| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout",
            |m: &Request| { &m.timeout },
            |m: &mut Request| { &mut m.timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_uint",
            |m: &Request| { &m.arg_uint },
            |m: &mut Request| { &mut m.arg_uint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_bytes",
            |m: &Request| { &m.arg_bytes },
            |m: &mut Request| { &mut m.arg_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.command = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.timeout = is.read_uint32()?;
                },
                32 => {
                    self.arg_uint = is.read_uint32()?;
                },
                42 => {
                    self.arg_bytes = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.command != ::protobuf::EnumOrUnknown::new(request::Command::INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.command.value());
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.timeout);
        }
        if self.arg_uint != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.arg_uint);
        }
        if !self.arg_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.arg_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.command != ::protobuf::EnumOrUnknown::new(request::Command::INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.command))?;
        }
        if self.timeout != 0 {
            os.write_uint32(3, self.timeout)?;
        }
        if self.arg_uint != 0 {
            os.write_uint32(4, self.arg_uint)?;
        }
        if !self.arg_bytes.is_empty() {
            os.write_bytes(5, &self.arg_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.command = ::protobuf::EnumOrUnknown::new(request::Command::INVALID);
        self.timeout = 0;
        self.arg_uint = 0;
        self.arg_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            version: 0,
            command: ::protobuf::EnumOrUnknown::from_i32(0),
            timeout: 0,
            arg_uint: 0,
            arg_bytes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:iodin.Request.Command)
    pub enum Command {
        // @@protoc_insertion_point(enum_value:iodin.Request.Command.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:iodin.Request.Command.MDB_OPEN)
        MDB_OPEN = 1,
        // @@protoc_insertion_point(enum_value:iodin.Request.Command.MDB_RESET)
        MDB_RESET = 2,
        // @@protoc_insertion_point(enum_value:iodin.Request.Command.MDB_TX)
        MDB_TX = 3,
        // @@protoc_insertion_point(enum_value:iodin.Request.Command.STOP)
        STOP = 100,
    }

    impl ::protobuf::Enum for Command {
        const NAME: &'static str = "Command";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Command> {
            match value {
                0 => ::std::option::Option::Some(Command::INVALID),
                1 => ::std::option::Option::Some(Command::MDB_OPEN),
                2 => ::std::option::Option::Some(Command::MDB_RESET),
                3 => ::std::option::Option::Some(Command::MDB_TX),
                100 => ::std::option::Option::Some(Command::STOP),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Command] = &[
            Command::INVALID,
            Command::MDB_OPEN,
            Command::MDB_RESET,
            Command::MDB_TX,
            Command::STOP,
        ];
    }

    impl ::protobuf::EnumFull for Command {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Request.Command").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Command::INVALID => 0,
                Command::MDB_OPEN => 1,
                Command::MDB_RESET => 2,
                Command::MDB_TX => 3,
                Command::STOP => 4,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Command {
        fn default() -> Self {
            Command::INVALID
        }
    }

    impl Command {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Command>("Request.Command")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:iodin.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:iodin.Response.version)
    pub version: u32,
    // @@protoc_insertion_point(field:iodin.Response.status)
    pub status: ::protobuf::EnumOrUnknown<response::Status>,
    // @@protoc_insertion_point(field:iodin.Response.error)
    pub error: ::std::string::String,
    // @@protoc_insertion_point(field:iodin.Response.data_bytes)
    pub data_bytes: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:iodin.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Response| { &m.version },
            |m: &mut Response| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Response| { &m.status },
            |m: &mut Response| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_bytes",
            |m: &Response| { &m.data_bytes },
            |m: &mut Response| { &mut m.data_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.error = is.read_string()?;
                },
                34 => {
                    self.data_bytes = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(response::Status::INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        if !self.data_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(response::Status::INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        if !self.data_bytes.is_empty() {
            os.write_bytes(4, &self.data_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.status = ::protobuf::EnumOrUnknown::new(response::Status::INVALID);
        self.error.clear();
        self.data_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            version: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            error: ::std::string::String::new(),
            data_bytes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:iodin.Response.Status)
    pub enum Status {
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.OK)
        OK = 1,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.ERR_INPUT)
        ERR_INPUT = 2,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.ERR_INTERNAL)
        ERR_INTERNAL = 3,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.ERR_CHECKSUM)
        ERR_CHECKSUM = 4,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.ERR_TIMEOUT)
        ERR_TIMEOUT = 5,
        // @@protoc_insertion_point(enum_value:iodin.Response.Status.ERR_HARDWARE)
        ERR_HARDWARE = 6,
    }

    impl ::protobuf::Enum for Status {
        const NAME: &'static str = "Status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Status> {
            match value {
                0 => ::std::option::Option::Some(Status::INVALID),
                1 => ::std::option::Option::Some(Status::OK),
                2 => ::std::option::Option::Some(Status::ERR_INPUT),
                3 => ::std::option::Option::Some(Status::ERR_INTERNAL),
                4 => ::std::option::Option::Some(Status::ERR_CHECKSUM),
                5 => ::std::option::Option::Some(Status::ERR_TIMEOUT),
                6 => ::std::option::Option::Some(Status::ERR_HARDWARE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Status] = &[
            Status::INVALID,
            Status::OK,
            Status::ERR_INPUT,
            Status::ERR_INTERNAL,
            Status::ERR_CHECKSUM,
            Status::ERR_TIMEOUT,
            Status::ERR_HARDWARE,
        ];
    }

    impl ::protobuf::EnumFull for Status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Response.Status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Status {
        fn default() -> Self {
            Status::INVALID
        }
    }

    impl Status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Response.Status")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0biodin.proto\x12\x05iodin\"\xf2\x01\n\x07Request\x12\x18\n\x07versi\
    on\x18\x01\x20\x01(\rR\x07version\x120\n\x07command\x18\x02\x20\x01(\x0e\
    2\x16.iodin.Request.CommandR\x07command\x12\x18\n\x07timeout\x18\x03\x20\
    \x01(\rR\x07timeout\x12\x19\n\x08arg_uint\x18\x04\x20\x01(\rR\x07argUint\
    \x12\x1b\n\targ_bytes\x18\x05\x20\x01(\x0cR\x08argBytes\"I\n\x07Command\
    \x12\x0b\n\x07INVALID\x10\0\x12\x0c\n\x08MDB_OPEN\x10\x01\x12\r\n\tMDB_R\
    ESET\x10\x02\x12\n\n\x06MDB_TX\x10\x03\x12\x08\n\x04STOP\x10d\"\xfe\x01\
    \n\x08Response\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12.\
    \n\x06status\x18\x02\x20\x01(\x0e2\x16.iodin.Response.StatusR\x06status\
    \x12\x14\n\x05error\x18\x03\x20\x01(\tR\x05error\x12\x1d\n\ndata_bytes\
    \x18\x04\x20\x01(\x0cR\tdataBytes\"s\n\x06Status\x12\x0b\n\x07INVALID\
    \x10\0\x12\x06\n\x02OK\x10\x01\x12\r\n\tERR_INPUT\x10\x02\x12\x10\n\x0cE\
    RR_INTERNAL\x10\x03\x12\x10\n\x0cERR_CHECKSUM\x10\x04\x12\x0f\n\x0bERR_T\
    IMEOUT\x10\x05\x12\x10\n\x0cERR_HARDWARE\x10\x06b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(request::Command::generated_enum_descriptor_data());
            enums.push(response::Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
